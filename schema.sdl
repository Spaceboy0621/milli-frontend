scalar Date

schema {
  query: query
  mutation: mutation
}

"Annotations object"
type annotation {
  "GraphID for annotation node"
  graphId: String @fake(type: uuid)
  context: String! @fake(type: password)

  "id"
  id: String! @fake(type: uuid)

  "object type"
  type: String! @fake(type: mimeType)

  "Annotation motivation"
  motivation: String! @fake(type: companyCatchPhrase)

  "The agent responsible for creation of annotation"
  creator: creator! 

  "The date-time of creation of annotation"
  created: String! @fake(type: pastDate)

  "The agent responsible for generation of annotation"
  generator: generator!

  "Date-time of generation of annotation"
  generated: String! @fake(type: recentDate)

  "Annotation body"
  body: bodyType

  "Annotation target"
  target: targetType!
}

input annotationInput {
  targetId: String!
  motivation: String!
  body: bodyInput!
  target: target!
  concept: String
}

input bodyInput {
  typ: String!
  motivation: String!
  value: String!
  format: String!
  language: String!
  creator: String!
}

"Can be one of TextualBodyType, etc."
union bodyType = textualBody

input comment {
  targetId: String!
  value: String!
}

type creator {
  id: String! @fake(type: uuid)
  typ: String! @fake(type: jobTitle)
  name: String! @fake(type: fullName)
  nickname: String! @fake(type: firstName)
}

input crosswalk {
  args: [mappingPair!]!
}

type generator {
  id: String! @fake(type: uuid)
  typ: String! @fake(type: jobTitle)
  name: String! @fake(type: companyName)
  homepage: String! @fake(type: url)
}

input ingestWithCrosswalk {
  url: String!
  crosswalk: crosswalk!
}

input mappingPair {
  val1: String!
  val2: String!
}

type mutation {
  ingestWithCrosswalk(ingestWithCrosswalk: ingestWithCrosswalk!): niosxEntity
  addEntity(niosxEntityInput: niosxEntityInput!): niosxEntity
  addAnnotation(annotation: annotationInput!): annotation
  addComment(comment: comment!): annotation
}

enum ImageSize {
  SMALL
  MEDIUM
  LARGE
}

type Image {
  src: String! @fake(type: imageUrl, options: {randomizeImageUrl:true, imageSize: {width: 100, height: 100} })
  alt: String @fake(type: hackerPhrase)
  size: ImageSize
}

type niosxEntity {
  graphId: String! @fake(type: uuid)
  agencyCode: String! @fake(type: countryCode)
  recordId: String! @fake(type: uuid)
  unitId: String! @fake(type: uuid)
  title: String! @fake(type: words, options: {minNumber: 2, maxNumber: 15})
  partner: String @fake(type: companyName)
  subjects: [String!] @fake(type: word)
  dateOfCreation: String! @fake(type: pastDate)
  extent: String!
  level: String!
  images: [Image!] @listLength(min: 0, max: 5)
  annotations: [annotation!]
}

input niosxEntityInput {
  agencyCode: String!
  recordId: String!
  unitId: String!
  title: String!
  creator: String!
  dateOfCreation: String!
  extent: String!
  level: String!
}

input DateRangeInput {
  from: Date
  to: Date
}

type DateRange {
  from: Date
  to: Date
}

input filterEntityInput {
  blob: String
  # use `id` from `Language` 
  lang: String
  date: DateRangeInput
  subjects: [String!]
  people: [String!]
  places: [String!]
  partners: [String!]
  mediaTypes: [String!]
}

type FilterValue {
  id: String! @fake(type: uuid)
  displayName: String! @fake(type: word)
  recordCount: Int
  isSelected: Boolean
}

type EntityFilter {
  blob: String @fake(type: words, options: {minNumber: 0, maxNumber: 5})
  date: DateRange!
  lang: [FilterValue!] @listLength(min: 2, max: 15)
  subjects: [FilterValue!] @listLength(min: 2, max: 15)
  people: [FilterValue!] @listLength(min: 2, max: 15)
  places: [FilterValue!] @listLength(min: 2, max: 15)
  partners: [FilterValue!] @listLength(min: 2, max: 15)
  mediaTypes: [FilterValue!] @listLength(min: 2, max: 15)
}

type PageEdge {
  node: niosxEntity!
  cursor: String! @fake(type: uuid)
  offset: Int
  # true if node is a direct match
  isDirectMatch: Boolean
  # null if no annotation matches
  annotationMatchCount: Int @fake(type: number, options: {minNumber: 0, maxNumber: 20})
}

type PageInfo {
  pageNumber: Int
  endCursor: String
  hasNextPage: Boolean
  filters: EntityFilter
}

type Page {
  edges: [PageEdge!] @listLength(min: 4, max: 25)
  pageInfo: PageInfo!
}

type query {
  "Finding Aid for a given collection (fonds, record group, manuscript group, etc.)"
  document(id: String!): niosxEntity

  "Look up an entity with its graphId"
  findEntity(id: String!): niosxEntity

  "All documents in the archive."
  allCollections: [niosxEntity!]!
  
  "Query for Entities"
  searchCollections(first: Int = 10, afterCursor: String, filterBy: filterEntityInput): Page!
}

type specificResourceType {
  typ: String!
  source: String!
  targetId: String
}

input target {
  source: String!
  targetId: String
}

"Can be one of SpecificResource, etc."
union targetType = specificResourceType

type textualBody {
  typ: String!
  purpose: String!
  value: String!
  format: String!
  language: String!
  creator: String!
}
